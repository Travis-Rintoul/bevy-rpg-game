// mod components;
// mod managers;
// mod models;
// mod plugins;
// mod scenes;
// mod systems;
// mod utils;


// use bevy::{app::Update, ecs::system::Res, math::{Vec2, Vec3}, DefaultPlugins};
// use bevy_rapier3d::{na::{point, vector}, parry::query::Ray, plugin::RapierContext};
// use models::structs::cursor_position::CursorPosition;
// use plugins::{player_plugin::PlayerPlugin, scene_manager_plugin::SceneManagerPlugin};

// fn main() {

//     let pos = CursorPosition { position: Vec3::new(0.0, 0.0, 0.0) };

//     App::new()
//         .add_plugins(DefaultPlugins)
//         .add_plugins(SceneManagerPlugin)
//         .add_plugins(PlayerPlugin)
//         .insert_resource(pos)
//         .add_systems(Update, get_block_under_cursor) // Your system to fire the ray
//         //.add_systems(Update, cursor_movement_system) 
//         .run();
// }

// fn get_block_under_cursor(
//     windows: Res<Windows>,
//     rapier_context: Res<RapierContext>,
//     query_camera: Query<(&Camera, &GlobalTransform), With<MainCamera>>,
// ) -> Option<EntityHit> {
//     let (camera, camera_transform) = query_camera.single();
//     let window = if let RenderTarget::Window(id) = camera.target {
//         windows.get(id).unwrap()
//     } else {
//         windows.get_primary().unwrap()
//     };
//     let window_size = Vec2::new(window.width() as f32, window.height() as f32);
//     let (ray_pos, ray_dir) = ray_from_screenspace(
//         window_size,
//         window.cursor_position()?,
//         camera,
//         camera_transform,
//     );
//     let solid = true;
// }

// /// Returns origin and direction for a ray from the camera through the cursor. This involves
// /// reversing the camera projection to map the cursor's coordinates in screen space to a set of
// /// coordinates in world space.
// fn ray_from_screenspace(
//     window_size: Vec2,
//     cursor_pos_screen: Vec2,
//     camera: &Camera,
//     camera_transform: &GlobalTransform,
// ) -> (Vec3, Vec3) {
//     // convert screen position [0..resolution] to ndc [-1..1] (gpu coordinates)
//     let ndc = (cursor_pos_screen / window_size) * 2.0 - Vec2::ONE;

//     // matrix for undoing the projection and camera transform
//     let ndc_to_world = camera_transform.compute_matrix() * camera.projection_matrix().inverse();

//     // use it to convert ndc to world-space coordinates
//     let cursor_pos_world = ndc_to_world.project_point3(ndc.extend(-1.0));

//     let origin = cursor_pos_world;
//     let ray_direction = (camera_transform.translation() - cursor_pos_world).normalize();

//     (origin, ray_direction)
// }
